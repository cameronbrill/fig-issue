name: "Golang code checks"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  format:
    name: format go files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.1
      - name: Format
        working-directory: ./backend
        run: gofmt -l -d -s .

  lint:
    name: lint go files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.1
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: ./backend
          args: --config .golangci.yaml
          version: latest

  schema-changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      linear-schema: ${{ steps.filter.outputs.linear-schema }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            linear-schema:
              - 'backend/publisher/linear/schema.graphql'

  generate:
    name: generate go files
    runs-on: ubuntu-latest
    needs: [schema-changes]
    if: needs.changes.outputs.linear-schema == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: copy backend
        run: |
          mkdir tmp
          cp -a backend/. tmp/
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.1
      - name: Generate graphql helpers
        working-directory: ./backend
        run: go generate
      - name: Diff Check
        run: |
          diff -r backend/ tmp/

  build:
    strategy:
      matrix:
        package: [pipeline]
    name: build go binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.1
      - name: Build binary
        working-directory: ./backend
        run: go build -o ./build/${{ matrix.package }} ./cmd/${{ matrix.package }}
